#### /Users/zeynel/Projects/InvestAlloc/investment_optimizer.py ####

inhalt: "#!/usr/bin/env python
import sys
import logging
import concurrent.futures
import copy
import argparse
import json
import os

# Überprüfen der erforderlichen Pakete
required_packages = [
    'numpy', 'scipy', 'matplotlib', 'pandas',
    'seaborn', 'plotly', 'packaging'
]

missing_packages = []
for pkg in required_packages:
    try:
        __import__(pkg)
    except ImportError:
        missing_packages.append(pkg)

if missing_packages:
    print(f"Fehlende Pakete: {', '.join(missing_packages)}. Bitte installieren Sie sie mit pip.")
    sys.exit(1)

import numpy as np
from scipy.optimize import minimize, differential_evolution, basinhopping
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
try:
    import plotly.express as px
    plotly_available = True
except ImportError:
    plotly_available = False
from packaging import version
import scipy

# Konstante, um Probleme (z.B. mit np.log) zu vermeiden:
MIN_INVESTMENT = 1e-8

def configure_logging(level=logging.INFO):
    logging.basicConfig(
        level=level,
        format='%(levelname)s: %(message)s',
        handlers=[logging.StreamHandler(sys.stdout)]
    )

def is_symmetric(matrix, tol=1e-8):
    return np.allclose(matrix, matrix.T, atol=tol)

def validate_inputs(roi_factors, synergy_matrix, total_budget, lower_bounds, upper_bounds, initial_allocation, c=None, epsilon_a=1e-6):
    n = len(roi_factors)
    synergy_matrix = np.array(synergy_matrix)
    if synergy_matrix.shape != (n, n):
        raise ValueError(f"Synergie-Matrix muss quadratisch sein und zur Länge der ROI-Faktoren ({n}) passen.")
    if not is_symmetric(synergy_matrix):
        raise ValueError("Synergie-Matrix muss symmetrisch sein.")
    if not (len(lower_bounds) == len(upper_bounds) == len(initial_allocation) == n):
        raise ValueError("lower_bounds, upper_bounds und initial_allocation müssen die gleiche Länge haben wie roi_factors.")
    if np.any(np.array(lower_bounds) > np.array(upper_bounds)):
        raise ValueError("Für jeden Bereich muss lower_bound <= upper_bound gelten.")
    if np.sum(lower_bounds) > total_budget:
        raise ValueError("Die Summe der Mindestinvestitionen überschreitet das Gesamtbudget.")
    if np.sum(upper_bounds) < total_budget:
        raise ValueError("Die Summe der Höchstinvestitionen ist kleiner als das Gesamtbudget.")
    if np.any(initial_allocation < lower_bounds):
        raise ValueError("Initial allocation unterschreitet mindestens eine Mindestinvestition.")
    if np.any(initial_allocation > upper_bounds):
        raise ValueError("Initial allocation überschreitet mindestens eine Höchstinvestition.")
    if np.any(np.array(lower_bounds) <= 0):
        raise ValueError("Alle Mindestinvestitionen müssen größer als 0 sein.")
    if np.any(np.array(roi_factors) <= epsilon_a):
        raise ValueError(f"Alle ROI-Faktoren müssen größer als {epsilon_a} sein.")
    if np.any(synergy_matrix < 0):
        raise ValueError("Alle Synergieeffekte müssen größer oder gleich Null sein.")
    if c is not None:
        c = np.array(c)
        if c.shape != (n,):
            raise ValueError("Optionaler Parameter 'c' muss die gleiche Form wie roi_factors haben.")
        if np.any(c < 0):
            raise ValueError("Alle Werte in 'c' müssen größer oder gleich Null sein.")

def get_bounds(lower_bounds, upper_bounds):
    return [(max(lower_bounds[i], MIN_INVESTMENT), upper_bounds[i]) for i in range(len(lower_bounds))]

def compute_synergy(x, synergy_matrix):
    return 0.5 * np.dot(x, np.dot(synergy_matrix, x))

def adjust_initial_guess(initial_allocation, lower_bounds, upper_bounds, total_budget, tol=1e-6):
    x0 = np.clip(initial_allocation, lower_bounds, upper_bounds)
    current_sum = np.sum(x0)
    max_iter = 100
    iter_count = 0
    while not np.isclose(current_sum, total_budget, atol=tol) and iter_count < max_iter:
        scale = total_budget / current_sum
        x0 = np.clip(x0 * scale, lower_bounds, upper_bounds)
        current_sum = np.sum(x0)
        iter_count += 1
    if not np.isclose(current_sum, total_budget, atol=tol):
        raise ValueError("Anpassung der Anfangsschätzung nicht möglich.")
    return x0

def validate_optional_param_c(c, reference_shape):
    c = np.array(c)
    if c.shape != reference_shape:
        raise ValueError("Parameter 'c' muss die gleiche Form wie die ROI-Faktoren haben.")
    if np.any(c < 0):
        raise ValueError("Alle Werte in 'c' müssen größer oder gleich Null sein.")
    return c

class OptimizationResult:
    def __init__(self, x, fun, success, message, **kwargs):
        self.x = x
        self.fun = fun
        self.success = success
        self.message = message
        for key, value in kwargs.items():
            setattr(self, key, value)

def single_simulation(sim_index, roi_factors, synergy_matrix, total_budget, lower_bounds, upper_bounds, initial_allocation, investment_labels, method, variation_percentage, optimizer_class):
    try:
        roi_sim = roi_factors * np.random.uniform(1 - variation_percentage, 1 + variation_percentage, size=len(roi_factors))
        roi_sim = np.maximum(roi_sim, 1e-6)
        synergy_sim = synergy_matrix * np.random.uniform(1 - variation_percentage, 1 + variation_percentage, size=synergy_matrix.shape)
        synergy_sim = np.triu(synergy_sim, 1) + np.triu(synergy_sim, 1).T
        optimizer_sim = optimizer_class(
            roi_sim, synergy_sim, total_budget,
            lower_bounds, upper_bounds, initial_allocation,
            investment_labels=investment_labels, log_level=logging.CRITICAL, c=None
        )
        result = optimizer_sim.optimize(method=method)
        if result and result.success:
            return result.x.tolist()
        else:
            return [np.nan] * len(roi_factors)
    except Exception as e:
        logging.error(f"Simulation {sim_index} fehlgeschlagen: {e}", exc_info=True)
        return [np.nan] * len(roi_factors)

class InvestmentOptimizer:
    """
    Optimiert die Investitionsallokation, wobei ROI-Faktoren und Synergieeffekte
    unter Berücksichtigung von Budget- und Investitionsgrenzen maximalen Nutzen erzielen sollen.
    """
    def __init__(self, roi_factors, synergy_matrix, total_budget, lower_bounds, upper_bounds, initial_allocation, investment_labels=None, log_level=logging.INFO, c=None):
        configure_logging(log_level)
        try:
            self.roi_factors = np.array(roi_factors)
            self.synergy_matrix = np.array(synergy_matrix)
            self.total_budget = total_budget
            self.lower_bounds = np.array(lower_bounds)
            self.upper_bounds = np.array(upper_bounds)
            self.n = len(roi_factors)
            self.investment_labels = investment_labels if investment_labels else [f'Bereich_{i}' for i in range(self.n)]
            self.initial_allocation = adjust_initial_guess(initial_allocation, self.lower_bounds, self.upper_bounds, self.total_budget)
            self.c = np.array(c) if c is not None else None
            validate_inputs(self.roi_factors, self.synergy_matrix, self.total_budget, self.lower_bounds, self.upper_bounds, self.initial_allocation, self.c)
        except Exception as e:
            logging.error(f"Fehler bei der Initialisierung: {e}", exc_info=True)
            raise

    def update_parameters(self, roi_factors=None, synergy_matrix=None, total_budget=None, lower_bounds=None, upper_bounds=None, initial_allocation=None, c=None):
        try:
            parameters_updated = False
            if roi_factors is not None:
                self.roi_factors = np.array(roi_factors)
                parameters_updated = True
            if synergy_matrix is not None:
                synergy_matrix = np.array(synergy_matrix)
                if not is_symmetric(synergy_matrix):
                    raise ValueError("Synergie-Matrix muss symmetrisch sein.")
                if np.any(synergy_matrix < 0):
                    raise ValueError("Alle Synergieeffekte müssen größer oder gleich Null sein.")
                self.synergy_matrix = synergy_matrix
                parameters_updated = True
            if total_budget is not None:
                self.total_budget = total_budget
                parameters_updated = True
            if lower_bounds is not None:
                self.lower_bounds = np.array(lower_bounds)
                parameters_updated = True
            if upper_bounds is not None:
                self.upper_bounds = np.array(upper_bounds)
                parameters_updated = True
            if initial_allocation is not None:
                self.initial_allocation = adjust_initial_guess(initial_allocation, self.lower_bounds, self.upper_bounds, self.total_budget)
            elif parameters_updated:
                self.initial_allocation = adjust_initial_guess(self.initial_allocation, self.lower_bounds, self.upper_bounds, self.total_budget)
            if c is not None:
                self.c = np.array(c)
            validate_inputs(self.roi_factors, self.synergy_matrix, self.total_budget, self.lower_bounds, self.upper_bounds, self.initial_allocation, self.c)
        except Exception as e:
            logging.error(f"Fehler beim Aktualisieren der Parameter: {e}", exc_info=True)
            raise

    def objective_with_penalty(self, x, penalty_coeff=1e8):
        synergy = compute_synergy(x, self.synergy_matrix)
        if self.c is not None:
            utility = np.sum(self.roi_factors * x - 0.5 * self.c * x**2)
        else:
            utility = np.sum(self.roi_factors * np.log(x))
        total_utility = utility + synergy
        budget_diff = np.sum(x) - self.total_budget
        penalty_budget = penalty_coeff * (budget_diff ** 2)
        return -total_utility + penalty_budget

    def objective_without_penalty(self, x):
        synergy = compute_synergy(x, self.synergy_matrix)
        if self.c is not None:
            utility = np.sum(self.roi_factors * x - 0.5 * self.c * x**2)
        else:
            utility = np.sum(self.roi_factors * np.log(x))
        total_utility = utility + synergy
        return -total_utility

    def identify_top_synergies_correct(self, top_n=6):
        try:
            synergy_copy = self.synergy_matrix.copy()
            np.fill_diagonal(synergy_copy, 0)
            triu_indices = np.triu_indices(self.n, k=1)
            synergy_values = synergy_copy[triu_indices]
            top_indices = np.argpartition(synergy_values, -top_n)[-top_n:]
            top_synergies = []
            for idx in top_indices:
                i = triu_indices[0][idx]
                j = triu_indices[1][idx]
                top_synergies.append(((i, j), synergy_copy[i, j]))
            top_synergies.sort(key=lambda x: x[1], reverse=True)
            return top_synergies
        except Exception as e:
            logging.error(f"Fehler beim Identifizieren der Top-Synergien: {e}", exc_info=True)
            return []

    def optimize(self, method='SLSQP', max_retries=3, workers=None, **kwargs):
        bounds = get_bounds(self.lower_bounds, self.upper_bounds)
        scipy_version = version.parse(scipy.__version__)
        de_workers_supported = scipy_version >= version.parse("1.4.0")
        if method == 'DE':
            updating = 'deferred' if workers is not None and workers != 1 and de_workers_supported else 'immediate'
        use_penalty = method in ['DE', 'TNC']
        optimization_methods = {
            'SLSQP': lambda: minimize(
                self.objective_with_penalty if use_penalty else self.objective_without_penalty,
                self.initial_allocation,
                method='SLSQP',
                bounds=bounds,
                constraints=[{'type': 'eq', 'fun': lambda x: np.sum(x) - self.total_budget}] if not use_penalty else [],
                options={'disp': False, 'maxiter': 1000},
                args=() if not use_penalty else (1e8,)
            ),
            'DE': lambda: differential_evolution(
                self.objective_with_penalty,
                bounds,
                strategy=kwargs.get('strategy', 'best1bin'),
                maxiter=kwargs.get('maxiter', 1000),
                tol=kwargs.get('tol', 1e-8),
                updating=updating,
                workers=workers if workers is not None and de_workers_supported else 1,
                polish=True,
                init='latinhypercube',
                args=(1e8,)
            ),
            'BasinHopping': lambda: basinhopping(
                self.objective_with_penalty,
                self.initial_allocation,
                niter=kwargs.get('niter', 100),
                stepsize=kwargs.get('stepsize', 0.5),
                minimizer_kwargs={'method': 'SLSQP', 'bounds': bounds, 'constraints': [{'type': 'eq', 'fun': lambda x: np.sum(x) - self.total_budget}],
                                  'options': {'maxiter': 1000, 'disp': False}},
                T=kwargs.get('T', 1.0),
                niter_success=kwargs.get('niter_success', 10)
            ),
            'TNC': lambda: minimize(
                self.objective_with_penalty,
                self.initial_allocation,
                method='TNC',
                bounds=bounds,
                options={'disp': False, 'maxiter': 1000},
                args=(1e8,)
            )
        }
        supported_methods = list(optimization_methods.keys())
        if method not in supported_methods:
            logging.error(f"Nicht unterstützte Optimierungsmethode: {method}. Unterstützte Methoden: {supported_methods}")
            raise ValueError(f"Nicht unterstützte Optimierungsmethode: {method}.")
        for attempt in range(1, max_retries + 1):
            try:
                opt_result = optimization_methods[method]()
                if method == 'BasinHopping':
                    x_opt = opt_result.x
                    fun_opt = opt_result.fun
                    success = opt_result.lowest_optimization_result.success
                    message = opt_result.lowest_optimization_result.message
                else:
                    x_opt = opt_result.x
                    fun_opt = opt_result.fun
                    success = opt_result.success
                    message = opt_result.message if hasattr(opt_result, 'message') else 'Optimierung abgeschlossen.'
                constraints_satisfied = (
                    np.isclose(np.sum(x_opt), self.total_budget, atol=1e-6) and
                    np.all(x_opt >= self.lower_bounds - 1e-8) and
                    np.all(x_opt <= self.upper_bounds + 1e-8)
                )
                if success and constraints_satisfied:
                    return OptimizationResult(x=x_opt, fun=fun_opt, success=success, message=message)
            except Exception as e:
                logging.error(f"Optimierungsversuch {attempt} mit Methode {method} fehlgeschlagen: {e}", exc_info=True)
        return None

    def sensitivity_analysis(self, B_values, method='SLSQP', tol=1e-6, **kwargs):
        allocations = []
        max_utilities = []
        for B_new in B_values:
            try:
                new_x0 = self.initial_allocation * (B_new / self.total_budget)
                new_x0 = adjust_initial_guess(new_x0, self.lower_bounds, self.upper_bounds, B_new)
                optimizer_copy = InvestmentOptimizer(
                    self.roi_factors,
                    self.synergy_matrix,
                    B_new,
                    self.lower_bounds,
                    self.upper_bounds,
                    new_x0,
                    investment_labels=self.investment_labels,
                    log_level=logging.CRITICAL,
                    c=self.c
                )
                result = optimizer_copy.optimize(method=method, **kwargs)
                if result and result.success:
                    allocations.append(result.x)
                    max_utilities.append(-result.fun)
                else:
                    allocations.append([np.nan] * self.n)
                    max_utilities.append(np.nan)
            except Exception as e:
                logging.error(f"Sensitivitätsanalyse für Budget {B_new} fehlgeschlagen: {e}", exc_info=True)
                allocations.append([np.nan] * self.n)
                max_utilities.append(np.nan)
        return B_values, allocations, max_utilities

    def robustness_analysis(self, num_simulations=100, method='DE', variation_percentage=0.1, parallel=True, num_workers=None):
        results = []
        if parallel:
            if num_workers is None:
                num_workers = min(4, os.cpu_count() or 1)
            with concurrent.futures.ThreadPoolExecutor(max_workers=num_workers) as executor:
                futures = [
                    executor.submit(
                        single_simulation,
                        sim, self.roi_factors, self.synergy_matrix, self.total_budget,
                        self.lower_bounds, self.upper_bounds, self.initial_allocation,
                        self.investment_labels, method, variation_percentage, InvestmentOptimizer
                    ) for sim in range(num_simulations)
                ]
                for future in concurrent.futures.as_completed(futures):
                    try:
                        result = future.result()
                        results.append(result)
                    except Exception as e:
                        logging.error(f"Robustheitsanalyse Simulation fehlgeschlagen: {e}", exc_info=True)
                        results.append([np.nan] * self.n)
        else:
            for sim in range(num_simulations):
                try:
                    result = single_simulation(sim, self.roi_factors, self.synergy_matrix, self.total_budget,
                                               self.lower_bounds, self.upper_bounds, self.initial_allocation,
                                               self.investment_labels, method, variation_percentage, InvestmentOptimizer)
                    results.append(result)
                except Exception as e:
                    logging.error(f"Robustheitsanalyse Simulation fehlgeschlagen: {e}", exc_info=True)
                    results.append([np.nan] * self.n)
        df_results = pd.DataFrame(results, columns=self.investment_labels)
        additional_stats = df_results.describe(percentiles=[0.25, 0.75]).transpose()
        return additional_stats, df_results

    def multi_criteria_optimization(self, alpha, beta, gamma, risk_func, sustainability_func, method='SLSQP'):
        def objective(x):
            synergy = compute_synergy(x, self.synergy_matrix)
            if self.c is not None:
                utility = np.sum(self.roi_factors * x - 0.5 * self.c * x**2)
            else:
                utility = np.sum(self.roi_factors * np.log(x))
            total_utility = utility + synergy
            risk = beta * risk_func(x)
            sustainability = gamma * sustainability_func(x)
            return -(alpha * total_utility - risk - sustainability)
        bounds = get_bounds(self.lower_bounds, self.upper_bounds)
        try:
            result = minimize(
                objective,
                self.initial_allocation,
                method=method,
                bounds=bounds,
                constraints=[{'type': 'eq', 'fun': lambda x: np.sum(x) - self.total_budget}],
                options={'disp': False, 'maxiter': 1000}
            )
            if result.success:
                return result
            else:
                logging.error(f"Multikriterielle Optimierung fehlgeschlagen: {result.message}")
                return None
        except Exception as e:
            logging.error(f"Multikriterielle Optimierung fehlgeschlagen: {e}", exc_info=True)
            return None

    def plot_sensitivity(self, B_values, allocations, utilities, method='SLSQP', interactive=False):
        try:
            if interactive and plotly_available:
                df_alloc = pd.DataFrame(allocations, columns=self.investment_labels)
                df_alloc['Budget'] = B_values
                df_util = pd.DataFrame({'Budget': B_values, 'Maximaler Nutzen': utilities})
                fig1 = px.line(df_alloc, x='Budget', y=self.investment_labels, title='Optimale Investitionsallokationen')
                fig1.show()
                fig2 = px.line(df_util, x='Budget', y='Maximaler Nutzen', title='Maximaler Nutzen bei verschiedenen Budgets')
                fig2.show()
            else:
                df_alloc = pd.DataFrame(allocations, columns=self.investment_labels)
                df_alloc.fillna(0, inplace=True)
                df_util = pd.DataFrame({'Budget': B_values, 'Maximaler Nutzen': utilities})
                fig, ax1 = plt.subplots(figsize=(12, 8))
                colors = sns.color_palette("tab10", n_colors=self.n)
                for i, label in enumerate(self.investment_labels):
                    ax1.plot(B_values, df_alloc[label], label=label, color=colors[i], alpha=0.7)
                ax1.set_xlabel('Budget')
                ax1.set_ylabel('Investitionsbetrag')
                ax1.legend(loc='upper left')
                ax1.grid(True)
                ax2 = ax1.twinx()
                ax2.plot(B_values, df_util['Maximaler Nutzen'], label='Maximaler Nutzen', color='tab:red', marker='o')
                ax2.set_ylabel('Maximaler Nutzen')
                ax2.legend(loc='upper right')
                plt.title(f'Optimale Investitionsallokation und Nutzen ({method})')
                plt.show()
        except Exception as e:
            logging.error(f"Fehler beim Plotten der Sensitivitätsanalyse: {e}", exc_info=True)

    def plot_robustness_analysis(self, df_results):
        try:
            num_failed = df_results.isna().any(axis=1).sum()
            if num_failed > 0:
                logging.warning(f"{num_failed} Simulationen sind fehlgeschlagen und werden in den Plots ausgeschlossen.")
            df_clean = df_results.dropna()
            if df_clean.empty:
                logging.warning("Keine gültigen Daten zum Plotten vorhanden.")
                return
            df_melted = df_clean.reset_index(drop=True).melt(var_name='Bereich', value_name='Investition')
            plt.figure(figsize=(12, 8))
            sns.boxplot(x='Bereich', y='Investition', data=df_melted)
            plt.xlabel('Investitionsbereich')
            plt.ylabel('Investitionsbetrag')
            plt.title('Verteilung der Investitionsallokationen aus der Robustheitsanalyse')
            plt.show()
            g = sns.FacetGrid(df_melted, col="Bereich", col_wrap=4, sharex=False, sharey=False)
            g.map(sns.histplot, "Investition", kde=True, bins=20, color='skyblue')
            g.fig.suptitle('Histogramme der Investitionsallokationen', y=1.02)
            plt.show()
            g_pair = sns.pairplot(df_clean)
            g_pair.fig.suptitle('Scatter-Plots der Investitionsallokationen', y=1.02)
            plt.show()
        except Exception as e:
            logging.error(f"Fehler beim Plotten der Robustheitsanalyse: {e}", exc_info=True)

    def plot_synergy_heatmap(self):
        try:
            plt.figure(figsize=(8, 6))
            sns.heatmap(self.synergy_matrix, annot=True, xticklabels=self.investment_labels, yticklabels=self.investment_labels, cmap='viridis')
            plt.title('Heatmap der Synergieeffekte')
            plt.show()
        except Exception as e:
            logging.error(f"Fehler beim Plotten der Synergie-Heatmap: {e}", exc_info=True)

    def plot_parameter_sensitivity(self, parameter_values, parameter_name, parameter_index=None, method='SLSQP', interactive=False):
        utilities = []
        allocations = []
        for value in parameter_values:
            try:
                optimizer_copy = InvestmentOptimizer(
                    self.roi_factors.copy(),
                    self.synergy_matrix.copy(),
                    self.total_budget,
                    self.lower_bounds.copy(),
                    self.upper_bounds.copy(),
                    self.initial_allocation.copy(),
                    investment_labels=self.investment_labels,
                    log_level=logging.CRITICAL,
                    c=self.c
                )
                if parameter_name == 'roi_factors':
                    if not isinstance(parameter_index, int):
                        raise ValueError("Für 'roi_factors' muss parameter_index ein int sein.")
                    if value <= 1e-6:
                        raise ValueError("ROI-Faktor muss größer als 1e-6 sein.")
                    new_roi = optimizer_copy.roi_factors.copy()
                    new_roi[parameter_index] = value
                    optimizer_copy.update_parameters(roi_factors=new_roi)
                elif parameter_name == 'synergy_matrix':
                    if not (isinstance(parameter_index, tuple) and len(parameter_index) == 2):
                        raise ValueError("Für 'synergy_matrix' muss parameter_index ein Tuple mit zwei Indizes sein.")
                    if value < 0:
                        raise ValueError("Synergieeffekte müssen größer oder gleich Null sein.")
                    i, j = parameter_index
                    new_synergy = optimizer_copy.synergy_matrix.copy()
                    new_synergy[i, j] = value
                    new_synergy[j, i] = value
                    optimizer_copy.update_parameters(synergy_matrix=new_synergy)
                else:
                    raise ValueError("Unbekannter Parametername.")
                result = optimizer_copy.optimize(method=method)
                if result and result.success:
                    utilities.append(-result.fun)
                    allocations.append(result.x)
                else:
                    utilities.append(np.nan)
                    allocations.append([np.nan] * self.n)
            except Exception as e:
                logging.error(f"Sensitivitätsanalyse für {parameter_name} mit Wert {value} fehlgeschlagen: {e}", exc_info=True)
                utilities.append(np.nan)
                allocations.append([np.nan] * self.n)
        try:
            xlabel = f'{parameter_name}[{parameter_index}]' if parameter_index is not None else parameter_name
            if interactive and plotly_available:
                df_util = pd.DataFrame({'Parameter Value': parameter_values, 'Maximaler Nutzen': utilities})
                fig = px.line(df_util, x='Parameter Value', y='Maximaler Nutzen', title=f'Sensitivität des Nutzens gegenüber {xlabel}')
                fig.show()
            else:
                plt.figure(figsize=(10, 6))
                plt.plot(parameter_values, utilities, marker='o')
                plt.xlabel(xlabel)
                plt.ylabel('Maximaler Nutzen')
                plt.title(f'Sensitivität des Nutzens gegenüber {xlabel}')
                plt.grid(True)
                plt.show()
        except Exception as e:
            logging.error(f"Fehler beim Plotten der Parametersensitivität: {e}", exc_info=True)

    def identify_top_synergies(self, top_n=6):
        return self.identify_top_synergies_correct(top_n=top_n)

def parse_arguments():
    parser = argparse.ArgumentParser(description='Investment Optimizer für Startups')
    parser.add_argument('--config', type=str, help='Pfad zur Konfigurationsdatei (JSON)')
    parser.add_argument('--interactive', action='store_true', help='Interaktive Plotly-Plots verwenden')
    return parser.parse_args()

def optimize_for_startup(roi_factors, synergy_matrix, total_budget, lower_bounds, upper_bounds, initial_allocation=None):
    if initial_allocation is None:
        initial_allocation = np.full(len(roi_factors), total_budget/len(roi_factors))
    optimizer = InvestmentOptimizer(
        roi_factors, synergy_matrix, total_budget, lower_bounds, upper_bounds, initial_allocation,
        log_level=logging.WARNING
    )
    result = optimizer.optimize(method='SLSQP')
    if result is not None and result.success:
        allocation_dict = {f"Bereich_{i}": round(val, 2) for i, val in enumerate(result.x)}
        return {'allocation': allocation_dict, 'max_utility': -result.fun}
    else:
        return {'allocation': None, 'max_utility': None}

def main():
    args = parse_arguments()
    configure_logging(logging.DEBUG)
    if args.config:
        try:
            with open(args.config, 'r') as f:
                config = json.load(f)
            required_keys = ['roi_factors', 'synergy_matrix', 'total_budget', 'lower_bounds', 'upper_bounds', 'initial_allocation']
            for key in required_keys:
                if key not in config:
                    raise KeyError(f"Schlüssel '{key}' fehlt in der Konfigurationsdatei.")
            investment_labels = config.get('investment_labels', [f'Bereich_{i}' for i in range(len(config['roi_factors']))])
            roi_factors = np.array(config['roi_factors'])
            synergy_matrix = np.array(config['synergy_matrix'])
            total_budget = config['total_budget']
            lower_bounds = np.array(config['lower_bounds'])
            upper_bounds = np.array(config['upper_bounds'])
            initial_allocation = np.array(config['initial_allocation'])
            c = np.array(config['c']) if 'c' in config else None
        except Exception as e:
            logging.error(f"Fehler beim Laden der Konfiguration: {e}", exc_info=True)
            sys.exit(1)
    else:
        investment_labels = ['F&E', 'Marketing', 'Vertrieb', 'Kundenservice']
        roi_factors = np.array([1, 2, 3, 4])
        synergy_matrix = np.array([
            [0, 0.1, 0.2, 0.3],
            [0.1, 0, 0.4, 0.5],
            [0.2, 0.4, 0, 0.6],
            [0.3, 0.5, 0.6, 0]
        ])
        total_budget = 10.0
        lower_bounds = np.array([1, 1, 1, 1])
        upper_bounds = np.array([5, 5, 5, 5])
        initial_allocation = np.array([2, 2, 2, 4])
        c = np.array([0.1, 0.1, 0.1, 0.1])
    try:
        optimizer = InvestmentOptimizer(roi_factors, synergy_matrix, total_budget, lower_bounds, upper_bounds, initial_allocation, investment_labels=investment_labels, log_level=logging.DEBUG, c=c)
    except Exception:
        sys.exit(1)

    # Optimierung mit SLSQP
    result_slsqp = optimizer.optimize(method='SLSQP')
    # Optimierung mit Differential Evolution
    result_de = optimizer.optimize(method='DE', workers=2)

    print("Optimierung mit SLSQP:")
    if result_slsqp is not None and result_slsqp.success:
        print("Optimale Allokation:", result_slsqp.x)
        print("Maximaler Nutzen:", -result_slsqp.fun)
    else:
        print("Optimierung fehlgeschlagen oder kein Ergebnis verfügbar.")

    print("\nOptimierung mit Differential Evolution:")
    if result_de is not None and result_de.success:
        print("Optimale Allokation:", result_de.x)
        print("Maximaler Nutzen:", -result_de.fun)
    else:
        print("Optimierung fehlgeschlagen oder kein Ergebnis verfügbar.")

    # Sensitivitätsanalyse für verschiedene Budgets
    B_values = np.arange(5, 21, 1)
    B_sens, allocations_sens, utilities_sens = optimizer.sensitivity_analysis(B_values, method='SLSQP')
    optimizer.plot_sensitivity(B_sens, allocations_sens, utilities_sens, method='SLSQP', interactive=args.interactive)

    # Identifikation der Top-Synergien
    top_synergies = optimizer.identify_top_synergies(top_n=6)
    print("\nWichtigste Synergieeffekte (sortiert):")
    for pair, value in top_synergies:
        print(f"Bereiche {investment_labels[pair[0]]} & {investment_labels[pair[1]]}: Synergieeffekt = {value}")

    # Robustheitsanalyse
    df_robust_stats, df_robust = optimizer.robustness_analysis(num_simulations=100, method='DE', variation_percentage=0.1, parallel=True, num_workers=4)
    print("\nRobustheitsanalyse (Statistik der Investitionsallokationen):")
    print(df_robust_stats)
    optimizer.plot_robustness_analysis(df_robust)

    # Multikriterielle Optimierung
    def risk_func(x):
        return np.var(x)
    def sustainability_func(x):
        return np.sum(x**2)
    result_mc = optimizer.multi_criteria_optimization(alpha=0.5, beta=0.3, gamma=0.2, risk_func=risk_func, sustainability_func=sustainability_func, method='SLSQP')
    if result_mc is not None and result_mc.success:
        print("\nMultikriterielle Optimierung:")
        print("Optimale Lösung:", result_mc.x)
    else:
        print("\nMultikriterielle Optimierung fehlgeschlagen oder kein Ergebnis verfügbar.")

    # Parametersensitivitätsanalysen
    optimizer.plot_parameter_sensitivity(np.linspace(1, 5, 10), 'roi_factors', parameter_index=0, method='SLSQP', interactive=args.interactive)
    optimizer.plot_parameter_sensitivity(np.linspace(0.05, 0.15, 10), 'synergy_matrix', parameter_index=(0, 1), method='SLSQP', interactive=args.interactive)

if __name__ == "__main__":
    main()
"

#### /Users/zeynel/Projects/InvestAlloc/LICENSE ####

inhalt: "MIT License

Copyright (c) 2024 Zeynel Acikgöz

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"

#### /Users/zeynel/Projects/InvestAlloc/requirements.txt ####

inhalt: "numpy
scipy
matplotlib
pandas
seaborn
plotly
"

#### /Users/zeynel/Projects/InvestAlloc/config.json ####

inhalt: "{
    "investment_labels": ["F&E", "Marketing", "Vertrieb", "Kundenservice"],
    "a": [1, 2, 3, 4],
    "b": [
        [0, 0.1, 0.2, 0.3],
        [0.1, 0, 0.4, 0.5],
        [0.2, 0.4, 0, 0.6],
        [0.3, 0.5, 0.6, 0]
    ],
    "B": 10.0,
    "L": [1, 1, 1, 1],
    "U": [5, 5, 5, 5],
    "x0": [2, 2, 2, 4]
}
"

#### /Users/zeynel/Projects/InvestAlloc/README.md ####

inhalt: "# InvestAlloc a Resource Allocation Framework

![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)

This project is an investment optimization tool that maximizes the efficiency of resource allocation across various investment areas. Using numerical optimization techniques, the tool takes into account different parameters such as efficiency, synergies between investments, budget constraints, and bounds for each investment. The project is written in Python and utilizes powerful optimization algorithms available in libraries like `scipy` and `numpy`.

## Table of Contents

- [Features](#features)
- [Installation](#installation)
- [Usage](#usage)
- [Configuration](#configuration)
- [Optimization Methods](#optimization-methods)
- [Visualization](#visualization)
- [License](#license)

## Features

- Optimizes investment allocation across multiple areas given efficiency and synergy effects.
- Supports multiple optimization methods including:
  - Sequential Least Squares Programming (SLSQP)
  - Differential Evolution (DE)
  - Basin Hopping
  - Truncated Newton Conjugate-Gradient (TNC)
- Sensitivity analysis of optimal allocations based on changing budget or investment parameters.
- Robustness analysis to evaluate the stability of allocations under uncertainty.
- Interactive and static visualizations of sensitivity, robustness, and synergy effects.

## Installation

To install and run the Investment Optimizer, you need Python 3.6 or higher and the following Python packages:

- `numpy`
- `scipy`
- `matplotlib`
- `pandas`
- `seaborn`
- `plotly`
- `logging`

To install the required packages, you can run:

```sh
pip install -r requirements.txt
```

## Usage

The Investment Optimizer can be used via command line. It reads configuration parameters from a JSON file or uses default values.

### Command-Line Arguments

- `--config`: Path to a JSON configuration file that provides parameters such as efficiency (`a`), synergy effects (`b`), budget (`B`), lower bounds (`L`), upper bounds (`U`), and initial guess (`x0`).
- `--interactive`: If provided, will use interactive visualizations (`plotly`).

To run the script, use:

```sh
python investment_optimizer.py --config config.json --interactive
```

### Example Parameters

If no configuration file is provided, the following default parameters are used:

- Investment areas: `['F&E', 'Marketing', 'Vertrieb', 'Kundenservice']`
- Efficiency parameters: `[1, 2, 3, 4]`
- Synergy matrix:
  ```
  [[0, 0.1, 0.2, 0.3],
   [0.1, 0, 0.4, 0.5],
   [0.2, 0.4, 0, 0.6],
   [0.3, 0.5, 0.6, 0]]
  ```
- Total budget (`B`): `10.0`
- Minimum investments (`L`): `[1, 1, 1, 1]`
- Maximum investments (`U`): `[5, 5, 5, 5]`
- Initial guess (`x0`): `[2, 2, 2, 4]`

## Configuration

You can provide a configuration file in JSON format with the following keys:

- `a`: List of efficiency parameters.
- `b`: 2D list representing the synergy matrix (must be symmetric).
- `B`: Total budget.
- `L`: List of minimum investments for each area.
- `U`: List of maximum investments for each area.
- `x0`: Initial investment allocation guess.
- `investment_labels` (optional): List of names for the investment areas.

## Optimization Methods

The Investment Optimizer provides several optimization methods:

- **SLSQP (Sequential Least Squares Programming)**: Suitable for constrained optimization.
- **Differential Evolution (DE)**: Useful for global optimization and finding the global minimum.
- **Basin Hopping**: Combines local optimization with random sampling to find the global minimum.
- **TNC (Truncated Newton Conjugate-Gradient)**: An efficient optimization method for large-scale problems.

The optimization can be started with different methods using the `optimize()` function in the `InvestmentOptimizer` class.

## Visualization

The project includes the following visualization capabilities:

- **Synergy Heatmap**: Shows the synergy between different investment areas.
- **Sensitivity Analysis**: Evaluates how varying the total budget affects optimal allocations.
- **Parameter Sensitivity Analysis**: Examines the effect of changing an individual parameter (`a` or `b`) on the overall allocation.
- **Robustness Analysis**: Visualizes the stability of allocations when the input parameters are varied randomly.
- **Interactive Dashboard**: Uses `plotly` to create interactive plots for a more detailed exploration of results.

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

---

Feel free to clone, modify, and use this project for your investment optimization tasks.

### Contributions

Contributions are welcome! Please open an issue or create a pull request for new features, bug fixes, or documentation improvements.


"

#### /Users/zeynel/Projects/InvestAlloc/test_investment_optimizer.py ####

inhalt: "import unittest
import numpy as np
from investment_optimizer import InvestmentOptimizer, is_symmetric, validate_inputs, adjust_initial_guess, objective

class TestInvestmentOptimizer(unittest.TestCase):
    def setUp(self):
        # Beispielparameter
        self.investment_labels = ['F&E', 'Marketing', 'Vertrieb', 'Kundenservice']
        self.n = len(self.investment_labels)
        self.a = np.array([1, 2, 3, 4])
        self.b = np.array([
            [0, 0.1, 0.2, 0.3],
            [0.1, 0, 0.4, 0.5],
            [0.2, 0.4, 0, 0.6],
            [0.3, 0.5, 0.6, 0]
        ])
        self.B = 10.0
        self.L = np.array([1] * self.n)
        self.U = np.array([5] * self.n)
        self.x0 = np.array([2, 2, 2, 4])
        self.optimizer = InvestmentOptimizer(self.a, self.b, self.B, self.L, self.U, self.x0, self.investment_labels, log_level=logging.CRITICAL)

    def test_is_symmetric(self):
        self.assertTrue(is_symmetric(self.b))
        b_asym = self.b.copy()
        b_asym[0,1] = 0.5
        self.assertFalse(is_symmetric(b_asym))

    def test_validate_inputs(self):
        # Test mit gültigen Eingaben
        try:
            validate_inputs(self.a, self.b, self.B, self.L, self.U, self.x0)
        except ValueError:
            self.fail("validate_inputs() raised ValueError unexpectedly!")

        # Test mit ungültiger Synergiematrix
        b_invalid = self.b.copy()
        b_invalid[0,1] = 0.5
        with self.assertRaises(ValueError):
            validate_inputs(self.a, b_invalid, self.B, self.L, self.U, self.x0)

    def test_optimize_slsqp(self):
        result = self.optimizer.optimize(method='SLSQP')
        self.assertIsNotNone(result)
        self.assertTrue(result.success)
        self.assertAlmostEqual(np.sum(result.x), self.B, places=4)

    def test_optimize_de(self):
        result = self.optimizer.optimize(method='DE', workers=1)
        self.assertIsNotNone(result)
        self.assertTrue(result.success)
        self.assertAlmostEqual(np.sum(result.x), self.B, places=4)

    def test_objective(self):
        x = self.x0
        obj_value = objective(x, self.a, self.b)
        self.assertIsInstance(obj_value, float)

    def test_adjust_initial_guess(self):
        x0 = np.array([0, 0, 0, 0])  # Ungültig, da unter den Mindestinvestitionen
        adjusted_x0 = adjust_initial_guess(x0, self.L, self.U, self.B)
        self.assertTrue(np.all(adjusted_x0 >= self.L))
        self.assertLessEqual(np.sum(adjusted_x0), self.B)

if __name__ == '__main__':
    unittest.main()
"

#### /Users/zeynel/Projects/InvestAlloc/.git/config ####

inhalt: "[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
	ignorecase = true
	precomposeunicode = true
[submodule]
	active = .
[remote "origin"]
	url = https://github.com/zeynelacikgoez/InvestAlloc.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch "main"]
	remote = origin
	merge = refs/heads/main
[lfs]
	repositoryformatversion = 0
"

#### /Users/zeynel/Projects/InvestAlloc/.git/HEAD ####

inhalt: "ref: refs/heads/main
"

#### /Users/zeynel/Projects/InvestAlloc/.git/description ####

inhalt: "Unnamed repository; edit this file 'description' to name the repository.
"

#### /Users/zeynel/Projects/InvestAlloc/.git/index ####

inhalt: Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb1 in position 13: invalid start byte

#### /Users/zeynel/Projects/InvestAlloc/.git/packed-refs ####

inhalt: "# pack-refs with: peeled fully-peeled sorted 
b7e44c1d35624d7cc45dc0733e19de7c77a6e928 refs/remotes/origin/main
"

#### /Users/zeynel/Projects/InvestAlloc/.git/FETCH_HEAD ####

inhalt: "b7e44c1d35624d7cc45dc0733e19de7c77a6e928		branch 'main' of https://github.com/zeynelacikgoez/InvestAlloc
"

#### /Users/zeynel/Projects/InvestAlloc/.git/objects/pack/pack-266b93256f507d6d667f01f4757cd1e0cf9e21e1.pack ####

inhalt: Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x99 in position 12: invalid start byte

#### /Users/zeynel/Projects/InvestAlloc/.git/objects/pack/pack-266b93256f507d6d667f01f4757cd1e0cf9e21e1.rev ####

inhalt: Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x93 in position 206: invalid start byte

#### /Users/zeynel/Projects/InvestAlloc/.git/objects/pack/pack-266b93256f507d6d667f01f4757cd1e0cf9e21e1.idx ####

inhalt: Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

#### /Users/zeynel/Projects/InvestAlloc/.git/info/exclude ####

inhalt: "# git ls-files --others --exclude-from=.git/info/exclude
# Lines that start with '#' are comments.
# For a project mostly in C, the following would be a good set of
# exclude patterns (uncomment them if you want to use them):
# *.[oa]
# *~
"

#### /Users/zeynel/Projects/InvestAlloc/.git/logs/HEAD ####

inhalt: "0000000000000000000000000000000000000000 b7e44c1d35624d7cc45dc0733e19de7c77a6e928 Zeynel Acikgöz <137368801+zeynelacikgoez@users.noreply.github.com> 1739676232 +0100	clone: from https://github.com/zeynelacikgoez/InvestAlloc.git
"

#### /Users/zeynel/Projects/InvestAlloc/.git/logs/refs/heads/main ####

inhalt: "0000000000000000000000000000000000000000 b7e44c1d35624d7cc45dc0733e19de7c77a6e928 Zeynel Acikgöz <137368801+zeynelacikgoez@users.noreply.github.com> 1739676232 +0100	clone: from https://github.com/zeynelacikgoez/InvestAlloc.git
"

#### /Users/zeynel/Projects/InvestAlloc/.git/logs/refs/remotes/origin/HEAD ####

inhalt: "0000000000000000000000000000000000000000 b7e44c1d35624d7cc45dc0733e19de7c77a6e928 Zeynel Acikgöz <137368801+zeynelacikgoez@users.noreply.github.com> 1739676232 +0100	clone: from https://github.com/zeynelacikgoez/InvestAlloc.git
b7e44c1d35624d7cc45dc0733e19de7c77a6e928 b7e44c1d35624d7cc45dc0733e19de7c77a6e928 Zeynel <zeynel@MacBookPro.fritz.box> 1739676539 +0100	remote set-head
b7e44c1d35624d7cc45dc0733e19de7c77a6e928 b7e44c1d35624d7cc45dc0733e19de7c77a6e928 Zeynel <zeynel@MacBookPro.fritz.box> 1739678377 +0100	remote set-head
b7e44c1d35624d7cc45dc0733e19de7c77a6e928 b7e44c1d35624d7cc45dc0733e19de7c77a6e928 Zeynel <zeynel@Zeynels-MacBook-Pro.fritz.box> 1739813314 +0100	remote set-head
"

#### /Users/zeynel/Projects/InvestAlloc/.git/hooks/commit-msg.sample ####

inhalt: "#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

test "" = "$(grep '^Signed-off-by: ' "$1" |
	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
	echo >&2 Duplicate Signed-off-by lines.
	exit 1
}
"

#### /Users/zeynel/Projects/InvestAlloc/.git/hooks/pre-rebase.sample ####

inhalt: "#!/bin/sh
#
# Copyright (c) 2006, 2008 Junio C Hamano
#
# The "pre-rebase" hook is run just before "git rebase" starts doing
# its job, and can prevent the command from running by exiting with
# non-zero status.
#
# The hook is called with the following parameters:
#
# $1 -- the upstream the series was forked from.
# $2 -- the branch being rebased (or empty when rebasing the current branch).
#
# This sample shows how to prevent topic branches that are already
# merged to 'next' branch from getting rebased, because allowing it
# would result in rebasing already published history.

publish=next
basebranch="$1"
if test "$#" = 2
then
	topic="refs/heads/$2"
else
	topic=`git symbolic-ref HEAD` ||
	exit 0 ;# we do not interrupt rebasing detached HEAD
fi

case "$topic" in
refs/heads/??/*)
	;;
*)
	exit 0 ;# we do not interrupt others.
	;;
esac

# Now we are dealing with a topic branch being rebased
# on top of master.  Is it OK to rebase it?

# Does the topic really exist?
git show-ref -q "$topic" || {
	echo >&2 "No such branch $topic"
	exit 1
}

# Is topic fully merged to master?
not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
if test -z "$not_in_master"
then
	echo >&2 "$topic is fully merged to master; better remove it."
	exit 1 ;# we could allow it, but there is no point.
fi

# Is topic ever merged to next?  If so you should not be rebasing it.
only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
only_next_2=`git rev-list ^master           ${publish} | sort`
if test "$only_next_1" = "$only_next_2"
then
	not_in_topic=`git rev-list "^$topic" master`
	if test -z "$not_in_topic"
	then
		echo >&2 "$topic is already up to date with master"
		exit 1 ;# we could allow it, but there is no point.
	else
		exit 0
	fi
else
	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
	/usr/bin/perl -e '
		my $topic = $ARGV[0];
		my $msg = "* $topic has commits already merged to public branch:\n";
		my (%not_in_next) = map {
			/^([0-9a-f]+) /;
			($1 => 1);
		} split(/\n/, $ARGV[1]);
		for my $elem (map {
				/^([0-9a-f]+) (.*)$/;
				[$1 => $2];
			} split(/\n/, $ARGV[2])) {
			if (!exists $not_in_next{$elem->[0]}) {
				if ($msg) {
					print STDERR $msg;
					undef $msg;
				}
				print STDERR " $elem->[1]\n";
			}
		}
	' "$topic" "$not_in_next" "$not_in_master"
	exit 1
fi

<<\DOC_END

This sample hook safeguards topic branches that have been
published from being rewound.

The workflow assumed here is:

 * Once a topic branch forks from "master", "master" is never
   merged into it again (either directly or indirectly).

 * Once a topic branch is fully cooked and merged into "master",
   it is deleted.  If you need to build on top of it to correct
   earlier mistakes, a new topic branch is created by forking at
   the tip of the "master".  This is not strictly necessary, but
   it makes it easier to keep your history simple.

 * Whenever you need to test or publish your changes to topic
   branches, merge them into "next" branch.

The script, being an example, hardcodes the publish branch name
to be "next", but it is trivial to make it configurable via
$GIT_DIR/config mechanism.

With this workflow, you would want to know:

(1) ... if a topic branch has ever been merged to "next".  Young
    topic branches can have stupid mistakes you would rather
    clean up before publishing, and things that have not been
    merged into other branches can be easily rebased without
    affecting other people.  But once it is published, you would
    not want to rewind it.

(2) ... if a topic branch has been fully merged to "master".
    Then you can delete it.  More importantly, you should not
    build on top of it -- other people may already want to
    change things related to the topic as patches against your
    "master", so if you need further changes, it is better to
    fork the topic (perhaps with the same name) afresh from the
    tip of "master".

Let's look at this example:

		   o---o---o---o---o---o---o---o---o---o "next"
		  /       /           /           /
		 /   a---a---b A     /           /
		/   /               /           /
	       /   /   c---c---c---c B         /
	      /   /   /             \         /
	     /   /   /   b---b C     \       /
	    /   /   /   /             \     /
    ---o---o---o---o---o---o---o---o---o---o---o "master"


A, B and C are topic branches.

 * A has one fix since it was merged up to "next".

 * B has finished.  It has been fully merged up to "master" and "next",
   and is ready to be deleted.

 * C has not merged to "next" at all.

We would want to allow C to be rebased, refuse A, and encourage
B to be deleted.

To compute (1):

	git rev-list ^master ^topic next
	git rev-list ^master        next

	if these match, topic has not merged in next at all.

To compute (2):

	git rev-list master..topic

	if this is empty, it is fully merged to "master".

DOC_END
"

#### /Users/zeynel/Projects/InvestAlloc/.git/hooks/sendemail-validate.sample ####

inhalt: "#!/bin/sh

# An example hook script to validate a patch (and/or patch series) before
# sending it via email.
#
# The hook should exit with non-zero status after issuing an appropriate
# message if it wants to prevent the email(s) from being sent.
#
# To enable this hook, rename this file to "sendemail-validate".
#
# By default, it will only check that the patch(es) can be applied on top of
# the default upstream branch without conflicts in a secondary worktree. After
# validation (successful or not) of the last patch of a series, the worktree
# will be deleted.
#
# The following config variables can be set to change the default remote and
# remote ref that are used to apply the patches against:
#
#   sendemail.validateRemote (default: origin)
#   sendemail.validateRemoteRef (default: HEAD)
#
# Replace the TODO placeholders with appropriate checks according to your
# needs.

validate_cover_letter () {
	file="$1"
	# TODO: Replace with appropriate checks (e.g. spell checking).
	true
}

validate_patch () {
	file="$1"
	# Ensure that the patch applies without conflicts.
	git am -3 "$file" || return
	# TODO: Replace with appropriate checks for this patch
	# (e.g. checkpatch.pl).
	true
}

validate_series () {
	# TODO: Replace with appropriate checks for the whole series
	# (e.g. quick build, coding style checks, etc.).
	true
}

# main -------------------------------------------------------------------------

if test "$GIT_SENDEMAIL_FILE_COUNTER" = 1
then
	remote=$(git config --default origin --get sendemail.validateRemote) &&
	ref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&
	worktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&
	git worktree add -fd --checkout "$worktree" "refs/remotes/$remote/$ref" &&
	git config --replace-all sendemail.validateWorktree "$worktree"
else
	worktree=$(git config --get sendemail.validateWorktree)
fi || {
	echo "sendemail-validate: error: failed to prepare worktree" >&2
	exit 1
}

unset GIT_DIR GIT_WORK_TREE
cd "$worktree" &&

if grep -q "^diff --git " "$1"
then
	validate_patch "$1"
else
	validate_cover_letter "$1"
fi &&

if test "$GIT_SENDEMAIL_FILE_COUNTER" = "$GIT_SENDEMAIL_FILE_TOTAL"
then
	git config --unset-all sendemail.validateWorktree &&
	trap 'git worktree remove -ff "$worktree"' EXIT &&
	validate_series
fi
"

#### /Users/zeynel/Projects/InvestAlloc/.git/hooks/pre-commit.sample ####

inhalt: "#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff-index --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --
"

#### /Users/zeynel/Projects/InvestAlloc/.git/hooks/applypatch-msg.sample ####

inhalt: "#!/bin/sh
#
# An example hook script to check the commit log message taken by
# applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.  The hook is
# allowed to edit the commit message file.
#
# To enable this hook, rename this file to "applypatch-msg".

. git-sh-setup
commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
:
"

#### /Users/zeynel/Projects/InvestAlloc/.git/hooks/fsmonitor-watchman.sample ####

inhalt: "#!/usr/bin/perl

use strict;
use warnings;
use IPC::Open2;

# An example hook script to integrate Watchman
# (https://facebook.github.io/watchman/) with git to speed up detecting
# new and modified files.
#
# The hook is passed a version (currently 2) and last update token
# formatted as a string and outputs to stdout a new update token and
# all files that have been modified since the update token. Paths must
# be relative to the root of the working tree and separated by a single NUL.
#
# To enable this hook, rename this file to "query-watchman" and set
# 'git config core.fsmonitor .git/hooks/query-watchman'
#
my ($version, $last_update_token) = @ARGV;

# Uncomment for debugging
# print STDERR "$0 $version $last_update_token\n";

# Check the hook interface version
if ($version ne 2) {
	die "Unsupported query-fsmonitor hook version '$version'.\n" .
	    "Falling back to scanning...\n";
}

my $git_work_tree = get_working_dir();

my $retry = 1;

my $json_pkg;
eval {
	require JSON::XS;
	$json_pkg = "JSON::XS";
	1;
} or do {
	require JSON::PP;
	$json_pkg = "JSON::PP";
};

launch_watchman();

sub launch_watchman {
	my $o = watchman_query();
	if (is_work_tree_watched($o)) {
		output_result($o->{clock}, @{$o->{files}});
	}
}

sub output_result {
	my ($clockid, @files) = @_;

	# Uncomment for debugging watchman output
	# open (my $fh, ">", ".git/watchman-output.out");
	# binmode $fh, ":utf8";
	# print $fh "$clockid\n@files\n";
	# close $fh;

	binmode STDOUT, ":utf8";
	print $clockid;
	print "\0";
	local $, = "\0";
	print @files;
}

sub watchman_clock {
	my $response = qx/watchman clock "$git_work_tree"/;
	die "Failed to get clock id on '$git_work_tree'.\n" .
		"Falling back to scanning...\n" if $? != 0;

	return $json_pkg->new->utf8->decode($response);
}

sub watchman_query {
	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
	or die "open2() failed: $!\n" .
	"Falling back to scanning...\n";

	# In the query expression below we're asking for names of files that
	# changed since $last_update_token but not from the .git folder.
	#
	# To accomplish this, we're using the "since" generator to use the
	# recency index to select candidate nodes and "fields" to limit the
	# output to file names only. Then we're using the "expression" term to
	# further constrain the results.
	my $last_update_line = "";
	if (substr($last_update_token, 0, 1) eq "c") {
		$last_update_token = "\"$last_update_token\"";
		$last_update_line = qq[\n"since": $last_update_token,];
	}
	my $query = <<"	END";
		["query", "$git_work_tree", {$last_update_line
			"fields": ["name"],
			"expression": ["not", ["dirname", ".git"]]
		}]
	END

	# Uncomment for debugging the watchman query
	# open (my $fh, ">", ".git/watchman-query.json");
	# print $fh $query;
	# close $fh;

	print CHLD_IN $query;
	close CHLD_IN;
	my $response = do {local $/; <CHLD_OUT>};

	# Uncomment for debugging the watch response
	# open ($fh, ">", ".git/watchman-response.json");
	# print $fh $response;
	# close $fh;

	die "Watchman: command returned no output.\n" .
	"Falling back to scanning...\n" if $response eq "";
	die "Watchman: command returned invalid output: $response\n" .
	"Falling back to scanning...\n" unless $response =~ /^\{/;

	return $json_pkg->new->utf8->decode($response);
}

sub is_work_tree_watched {
	my ($output) = @_;
	my $error = $output->{error};
	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
		$retry--;
		my $response = qx/watchman watch "$git_work_tree"/;
		die "Failed to make watchman watch '$git_work_tree'.\n" .
		    "Falling back to scanning...\n" if $? != 0;
		$output = $json_pkg->new->utf8->decode($response);
		$error = $output->{error};
		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		# Uncomment for debugging watchman output
		# open (my $fh, ">", ".git/watchman-output.out");
		# close $fh;

		# Watchman will always return all files on the first query so
		# return the fast "everything is dirty" flag to git and do the
		# Watchman query just to get it over with now so we won't pay
		# the cost in git to look up each individual file.
		my $o = watchman_clock();
		$error = $output->{error};

		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		output_result($o->{clock}, ("/"));
		$last_update_token = $o->{clock};

		eval { launch_watchman() };
		return 0;
	}

	die "Watchman: $error.\n" .
	"Falling back to scanning...\n" if $error;

	return 1;
}

sub get_working_dir {
	my $working_dir;
	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
		$working_dir = Win32::GetCwd();
		$working_dir =~ tr/\\/\//;
	} else {
		require Cwd;
		$working_dir = Cwd::cwd();
	}

	return $working_dir;
}
"

#### /Users/zeynel/Projects/InvestAlloc/.git/hooks/pre-receive.sample ####

inhalt: "#!/bin/sh
#
# An example hook script to make use of push options.
# The example simply echoes all push options that start with 'echoback='
# and rejects all pushes when the "reject" push option is used.
#
# To enable this hook, rename this file to "pre-receive".

if test -n "$GIT_PUSH_OPTION_COUNT"
then
	i=0
	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
	do
		eval "value=\$GIT_PUSH_OPTION_$i"
		case "$value" in
		echoback=*)
			echo "echo from the pre-receive-hook: ${value#*=}" >&2
			;;
		reject)
			exit 1
		esac
		i=$((i + 1))
	done
fi
"

#### /Users/zeynel/Projects/InvestAlloc/.git/hooks/prepare-commit-msg.sample ####

inhalt: "#!/bin/sh
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

# This hook includes three examples. The first one removes the
# "# Please enter the commit message..." help message.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"

# case "$COMMIT_SOURCE,$SHA1" in
#  ,|template,)
#    /usr/bin/perl -i.bak -pe '
#       print "\n" . `git diff --cached --name-status -r`
# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
#  *) ;;
# esac

# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
# if test -z "$COMMIT_SOURCE"
# then
#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
# fi
"

#### /Users/zeynel/Projects/InvestAlloc/.git/hooks/post-update.sample ####

inhalt: "#!/bin/sh
#
# An example hook script to prepare a packed repository for use over
# dumb transports.
#
# To enable this hook, rename this file to "post-update".

exec git update-server-info
"

#### /Users/zeynel/Projects/InvestAlloc/.git/hooks/pre-merge-commit.sample ####

inhalt: "#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git merge" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message to
# stderr if it wants to stop the merge commit.
#
# To enable this hook, rename this file to "pre-merge-commit".

. git-sh-setup
test -x "$GIT_DIR/hooks/pre-commit" &&
        exec "$GIT_DIR/hooks/pre-commit"
:
"

#### /Users/zeynel/Projects/InvestAlloc/.git/hooks/pre-applypatch.sample ####

inhalt: "#!/bin/sh
#
# An example hook script to verify what is about to be committed
# by applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-applypatch".

. git-sh-setup
precommit="$(git rev-parse --git-path hooks/pre-commit)"
test -x "$precommit" && exec "$precommit" ${1+"$@"}
:
"

#### /Users/zeynel/Projects/InvestAlloc/.git/hooks/pre-push.sample ####

inhalt: "#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')

while read local_ref local_oid remote_ref remote_oid
do
	if test "$local_oid" = "$zero"
	then
		# Handle delete
		:
	else
		if test "$remote_oid" = "$zero"
		then
			# New branch, examine all commits
			range="$local_oid"
		else
			# Update to existing branch, examine new commits
			range="$remote_oid..$local_oid"
		fi

		# Check for WIP commit
		commit=$(git rev-list -n 1 --grep '^WIP' "$range")
		if test -n "$commit"
		then
			echo >&2 "Found WIP commit in $local_ref, not pushing"
			exit 1
		fi
	fi
done

exit 0
"

#### /Users/zeynel/Projects/InvestAlloc/.git/hooks/update.sample ####

inhalt: "#!/bin/sh
#
# An example hook script to block unannotated tags from entering.
# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
#
# To enable this hook, rename this file to "update".
#
# Config
# ------
# hooks.allowunannotated
#   This boolean sets whether unannotated tags will be allowed into the
#   repository.  By default they won't be.
# hooks.allowdeletetag
#   This boolean sets whether deleting tags will be allowed in the
#   repository.  By default they won't be.
# hooks.allowmodifytag
#   This boolean sets whether a tag may be modified after creation. By default
#   it won't be.
# hooks.allowdeletebranch
#   This boolean sets whether deleting branches will be allowed in the
#   repository.  By default they won't be.
# hooks.denycreatebranch
#   This boolean sets whether remotely creating branches will be denied
#   in the repository.  By default this is allowed.
#

# --- Command line
refname="$1"
oldrev="$2"
newrev="$3"

# --- Safety check
if [ -z "$GIT_DIR" ]; then
	echo "Don't run this script from the command line." >&2
	echo " (if you want, you could supply GIT_DIR then run" >&2
	echo "  $0 <ref> <oldrev> <newrev>)" >&2
	exit 1
fi

if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
	exit 1
fi

# --- Config
allowunannotated=$(git config --type=bool hooks.allowunannotated)
allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
allowmodifytag=$(git config --type=bool hooks.allowmodifytag)

# check for no description
projectdesc=$(sed -e '1q' "$GIT_DIR/description")
case "$projectdesc" in
"Unnamed repository"* | "")
	echo "*** Project description file hasn't been set" >&2
	exit 1
	;;
esac

# --- Check types
# if $newrev is 0000...0000, it's a commit to delete a ref.
zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
if [ "$newrev" = "$zero" ]; then
	newrev_type=delete
else
	newrev_type=$(git cat-file -t $newrev)
fi

case "$refname","$newrev_type" in
	refs/tags/*,commit)
		# un-annotated tag
		short_refname=${refname##refs/tags/}
		if [ "$allowunannotated" != "true" ]; then
			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
			exit 1
		fi
		;;
	refs/tags/*,delete)
		# delete tag
		if [ "$allowdeletetag" != "true" ]; then
			echo "*** Deleting a tag is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/tags/*,tag)
		# annotated tag
		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
		then
			echo "*** Tag '$refname' already exists." >&2
			echo "*** Modifying a tag is not allowed in this repository." >&2
			exit 1
		fi
		;;
	refs/heads/*,commit)
		# branch
		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
			echo "*** Creating a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/heads/*,delete)
		# delete branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/remotes/*,commit)
		# tracking branch
		;;
	refs/remotes/*,delete)
		# delete tracking branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	*)
		# Anything else (is there anything else?)
		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
		exit 1
		;;
esac

# --- Finished
exit 0
"

#### /Users/zeynel/Projects/InvestAlloc/.git/hooks/push-to-checkout.sample ####

inhalt: "#!/bin/sh

# An example hook script to update a checked-out tree on a git push.
#
# This hook is invoked by git-receive-pack(1) when it reacts to git
# push and updates reference(s) in its repository, and when the push
# tries to update the branch that is currently checked out and the
# receive.denyCurrentBranch configuration variable is set to
# updateInstead.
#
# By default, such a push is refused if the working tree and the index
# of the remote repository has any difference from the currently
# checked out commit; when both the working tree and the index match
# the current commit, they are updated to match the newly pushed tip
# of the branch. This hook is to be used to override the default
# behaviour; however the code below reimplements the default behaviour
# as a starting point for convenient modification.
#
# The hook receives the commit with which the tip of the current
# branch is going to be updated:
commit=$1

# It can exit with a non-zero status to refuse the push (when it does
# so, it must not modify the index or the working tree).
die () {
	echo >&2 "$*"
	exit 1
}

# Or it can make any necessary changes to the working tree and to the
# index to bring them to the desired state when the tip of the current
# branch is updated to the new commit, and exit with a zero status.
#
# For example, the hook can simply run git read-tree -u -m HEAD "$1"
# in order to emulate git fetch that is run in the reverse direction
# with git push, as the two-tree form of git read-tree -u -m is
# essentially the same as git switch or git checkout that switches
# branches while keeping the local changes in the working tree that do
# not interfere with the difference between the branches.

# The below is a more-or-less exact translation to shell of the C code
# for the default behaviour for git's push-to-checkout hook defined in
# the push_to_deploy() function in builtin/receive-pack.c.
#
# Note that the hook will be executed from the repository directory,
# not from the working tree, so if you want to perform operations on
# the working tree, you will have to adapt your code accordingly, e.g.
# by adding "cd .." or using relative paths.

if ! git update-index -q --ignore-submodules --refresh
then
	die "Up-to-date check failed"
fi

if ! git diff-files --quiet --ignore-submodules --
then
	die "Working directory has unstaged changes"
fi

# This is a rough translation of:
#
#   head_has_history() ? "HEAD" : EMPTY_TREE_SHA1_HEX
if git cat-file -e HEAD 2>/dev/null
then
	head=HEAD
else
	head=$(git hash-object -t tree --stdin </dev/null)
fi

if ! git diff-index --quiet --cached --ignore-submodules $head --
then
	die "Working directory has staged changes"
fi

if ! git read-tree -u -m "$commit"
then
	die "Could not update working tree to new HEAD"
fi
"

#### /Users/zeynel/Projects/InvestAlloc/.git/refs/heads/main ####

inhalt: "b7e44c1d35624d7cc45dc0733e19de7c77a6e928
"

#### /Users/zeynel/Projects/InvestAlloc/.git/refs/remotes/origin/HEAD ####

inhalt: "ref: refs/remotes/origin/main
"

